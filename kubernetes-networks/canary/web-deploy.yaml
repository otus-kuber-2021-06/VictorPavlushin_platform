apiVersion: apps/v1
kind: Deployment
metadata:
  name: canary # Название нашего объекта Deployment
spec:
  replicas: 3 # Начнем с одного пода
  selector: # Укажем, какие поды относятся к нашему Deployment:
    matchLabels: # - это поды с меткой
      app: canary # app и ее значением web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 100%
  template: # Теперь зададим шаблон конфигурации пода
    metadata:
      name: canary # Название Pod
      labels: # Метки в формате key: value
        app: canary
    spec: # Описание Pod
      containers: # Описание контейнеров внутри Pod
      - name: canary # Название контейнера
        image: docker.io/vii98/web-app:latest # Образ из которого создается контейнер
        readinessProbe: # Добавим проверку готовности
          httpGet: # веб-сервера отдавать
            path: /index.html # контент
            port: 8000
        livenessProbe:
          tcpSocket: { port: 8000 }
        imagePullPolicy: Always
        volumeMounts:
        - name: app
          mountPath: /app
      initContainers:
      - name: init-web
        image: busybox:latest
        command: ['sh', '-c', 'wget -O- https://tinyurl.com/otus-k8s-intro | sh']
        volumeMounts:
        - name: app
          mountPath: /app
      volumes:
      - name: app
        emptyDir: {}
      securityContext:
        runAsUser: 1001

---
apiVersion: v1
kind: Service
metadata:
  name: canary-svc
spec:
  selector:
    app: canary
  type: ClusterIP
  clusterIP: None
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8000

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: canary
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "50"
spec:
  rules:
  - http:
      paths:
      - path: /canary
        backend:
          serviceName: canary-svc
          servicePort: 8000
